/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.9.1 */

#ifndef PB_ECAL_PB_DATATYPE_NPB_H_INCLUDED
#define PB_ECAL_PB_DATATYPE_NPB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef struct _eCAL_pb_DataTypeInformation {
    pb_callback_t name; /* name of the datatype */
    pb_callback_t encoding; /* encoding of the datatype (e.g. protobuf, flatbuffers, capnproto) */
    pb_callback_t descriptor_information; /* descriptor information of the datatype (necessary for reflection) */
} eCAL_pb_DataTypeInformation;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define eCAL_pb_DataTypeInformation_init_default {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define eCAL_pb_DataTypeInformation_init_zero    {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}

/* Field tags (for use in manual encoding/decoding) */
#define eCAL_pb_DataTypeInformation_name_tag     1
#define eCAL_pb_DataTypeInformation_encoding_tag 2
#define eCAL_pb_DataTypeInformation_descriptor_information_tag 3

/* Struct field encoding specification for nanopb */
#define eCAL_pb_DataTypeInformation_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   name,              1) \
X(a, CALLBACK, SINGULAR, STRING,   encoding,          2) \
X(a, CALLBACK, SINGULAR, BYTES,    descriptor_information,   3)
#define eCAL_pb_DataTypeInformation_CALLBACK pb_default_field_callback
#define eCAL_pb_DataTypeInformation_DEFAULT NULL

extern const pb_msgdesc_t eCAL_pb_DataTypeInformation_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define eCAL_pb_DataTypeInformation_fields &eCAL_pb_DataTypeInformation_msg

/* Maximum encoded size of messages (where known) */
/* eCAL_pb_DataTypeInformation_size depends on runtime parameters */

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
